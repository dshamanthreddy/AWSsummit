AWSTemplateFormatVersion: '2010-09-09'
Description: 'Running Container-Enabled Microservices on AWS Bootcamp: Lab 1 - ECS
  Cluster CloudFormation Template'
Mappings:
  AWSRegionToAMI:
    eu-west-1: {AMI: ami-95f8d2f3}
    us-east-1: {AMI: ami-275ffe31}
    us-east-2: {AMI: ami-62745007}
    us-west-2: {AMI: ami-62d35c02}
Outputs:
  BootcampCluster:
    Description: The name of the ECS cluster
    Value: {Ref: BootcampCluster}
Parameters:
  InstanceType:
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large]
    ConstraintDescription: Must be a valid EC2 T2 instance type
    Default: t2.small
    Description: ECS instance type
    Type: String
  KeyName: {Description: Name of an existing EC2 KeyPair to enable SSH access to the
      EC2 instances, Type: 'AWS::EC2::KeyPair::KeyName'}
  PublicSubnet1: {Description: The first public subnet of the VPC, Type: 'AWS::EC2::Subnet::Id'}
  PublicSubnet2: {Description: The second public subnet of the VPC, Type: 'AWS::EC2::Subnet::Id'}
  SourceCidr: {Default: 0.0.0.0/0, Description: Optional - CIDR/IP range for instance
      outside access - defaults to 0.0.0.0/0, Type: String}
  VPC: {Description: The VPC Id to launch the cluster into, Type: 'AWS::EC2::VPC::Id'}
Resources:
  AutoScalingGroup:
    CreationPolicy:
      ResourceSignal: {Count: '1', Timeout: PT15M}
    Properties:
      DesiredCapacity: '1'
      LaunchConfigurationName: {Ref: LaunchConfig}
      MaxSize: '1'
      MinSize: '1'
      Tags:
      - {Key: Name, PropagateAtLaunch: 'true', Value: ECS Instance}
      VPCZoneIdentifier:
      - {Ref: PublicSubnet1}
      - {Ref: PublicSubnet2}
    Type: AWS::AutoScaling::AutoScalingGroup
  BootcampCluster: {Type: 'AWS::ECS::Cluster'}
  CloudformationLogGroup:
    Properties: {RetentionInDays: 7}
    Type: AWS::Logs::LogGroup
  EcsLogGroup:
    Properties: {RetentionInDays: 7}
    Type: AWS::Logs::LogGroup
  InstanceProfile:
    Properties:
      Path: /
      Roles:
      - {Ref: InstanceRole}
    Type: AWS::IAM::InstanceProfile
  InstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        Version: '2012-10-17'
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM',
        'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role']
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents',
              'logs:DescribeLogStreams']
            Effect: Allow
            Resource: ['arn:aws:logs:*:*:*']
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
  LaunchConfig:
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          install_all: [install_cfn, install_logs, install_ssm, configure_ecs]
        configure_ecs:
          files:
            /etc/ecs/ecs.config:
              content:
                Fn::Join:
                - ''
                - - ECS_CLUSTER=
                  - {Ref: BootcampCluster}
                  - '

                    '
                  - 'ECS_AVAILABLE_LOGGING_DRIVERS=["json-file","awslogs"]

                    '
              group: root
              mode: '000444'
              owner: root
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                Fn::Join:
                - ''
                - - '[main]

                    '
                  - stack=
                  - {Ref: 'AWS::StackId'}
                  - '

                    '
                  - region=
                  - {Ref: 'AWS::Region'}
                  - '

                    '
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                Fn::Join:
                - ''
                - - '[cfn-auto-reloader-hook]

                    '
                  - 'triggers=post.update

                    '
                  - 'path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init

                    '
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - {Ref: 'AWS::StackName'}
                  - '         --resource LaunchConfig '
                  - '         --configsets install_all '
                  - '         --region '
                  - {Ref: 'AWS::Region'}
                  - '

                    '
                  - 'runas=root

                    '
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
        install_logs:
          commands:
            01_create_state_directory: {command: mkdir -p /var/awslogs/state}
          files:
            /etc/awslogs/awscli.conf:
              content:
                Fn::Join:
                - ''
                - - '[plugins]

                    '
                  - 'cwlogs = cwlogs

                    '
                  - '[default]

                    '
                  - 'region = '
                  - {Ref: 'AWS::Region'}
                  - '

                    '
              group: root
              mode: '000444'
              owner: root
            /etc/awslogs/awslogs.conf:
              content:
                Fn::Join:
                - ''
                - - '[general]

                    '
                  - 'state_file = /var/awslogs/state/agent-state

                    '
                  - '[/var/log/messages]

                    '
                  - 'file = /var/log/messages

                    '
                  - 'log_group_name = '
                  - {Ref: SysLogGroup}
                  - '

                    '
                  - 'log_stream_name = {instance_id}/syslog

                    '
                  - 'datetime_format = %b %d %H:%M:%S

                    '
                  - '[/var/log/docker]

                    '
                  - 'file = /var/log/docker

                    '
                  - 'log_group_name = '
                  - {Ref: EcsLogGroup}
                  - '

                    '
                  - 'log_stream_name = {instance_id}/docker.log

                    '
                  - 'datetime_format = %Y-%m-%dT%H:%M:%S.%fZ

                    '
                  - '[/var/log/ecs-agent]

                    '
                  - 'file = /var/log/ecs/ecs-agent*

                    '
                  - 'log_group_name = '
                  - {Ref: EcsLogGroup}
                  - '

                    '
                  - 'log_stream_name = {instance_id}/ecs-agent.log

                    '
                  - 'datetime_format = %Y-%m-%dT%H:%M:%SZ

                    '
                  - '[/var/log/ecs-init]

                    '
                  - 'file = /var/log/ecs/ecs-init*

                    '
                  - 'log_group_name = '
                  - {Ref: EcsLogGroup}
                  - '

                    '
                  - 'log_stream_name = {instance_id}/ecs-init.log

                    '
                  - 'datetime_format = %Y-%m-%dT%H:%M:%SZ

                    '
                  - '[/var/log/cloud-init.log]

                    '
                  - 'file = /var/log/cloud-init.log

                    '
                  - 'log_group_name = '
                  - {Ref: CloudformationLogGroup}
                  - '

                    '
                  - 'log_stream_name = {instance_id}/cloud-init.log

                    '
                  - "datetime_format = \n"
                  - '[/var/log/cloud-init-output.log]

                    '
                  - 'file = /var/log/cloud-init-output.log

                    '
                  - 'log_group_name = '
                  - {Ref: CloudformationLogGroup}
                  - '

                    '
                  - 'log_stream_name = {instance_id}/cloud-init-output.log

                    '
                  - "datetime_format = \n"
                  - '[/var/log/cfn-init.log]

                    '
                  - 'file = /var/log/cfn-init.log

                    '
                  - 'log_group_name = '
                  - {Ref: CloudformationLogGroup}
                  - '

                    '
                  - 'log_stream_name = {instance_id}/cfn-init.log

                    '
                  - "datetime_format = \n"
                  - '[/var/log/cfn-init-cmd.log]

                    '
                  - 'file = /var/log/cfn-init-cmd.log

                    '
                  - 'log_group_name = '
                  - {Ref: CloudformationLogGroup}
                  - '

                    '
                  - 'log_stream_name = {instance_id}/cfn-init-cmd.log

                    '
                  - "datetime_format = \n"
                  - '[/var/log/cfn-hup.log]

                    '
                  - 'file = /var/log/cfn-hup.log

                    '
                  - 'log_group_name = '
                  - {Ref: CloudformationLogGroup}
                  - '

                    '
                  - 'log_stream_name = {instance_id}/cfn-hup.log

                    '
                  - "datetime_format = \n"
                  - '[/var/log/cfn-wire.log]

                    '
                  - 'file = /var/log/cfn-wire.log

                    '
                  - 'log_group_name = '
                  - {Ref: CloudformationLogGroup}
                  - '

                    '
                  - 'log_stream_name = {instance_id}/cfn-wire.log

                    '
                  - "datetime_format = \n"
              group: root
              mode: '000444'
              owner: root
          packages:
            yum:
              awslogs: []
          services:
            sysvinit:
              awslogs:
                enabled: 'true'
                ensureRunning: 'true'
                files: [/etc/awslogs/awslogs.conf]
        install_ssm:
          commands:
            01_install_agent:
              command:
                Fn::Join:
                - ''
                - - curl https://amazon-ssm-
                  - {Ref: 'AWS::Region'}
                  - .s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o /tmp/amazon-ssm-agent.rpm
                    && yum install -y /tmp/amazon-ssm-agent.rpm
    Properties:
      AssociatePublicIpAddress: 'true'
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs: {VolumeSize: '50', VolumeType: gp2}
      IamInstanceProfile: {Ref: InstanceProfile}
      ImageId:
        Fn::FindInMap:
        - AWSRegionToAMI
        - {Ref: 'AWS::Region'}
        - AMI
      InstanceType: {Ref: InstanceType}
      KeyName: {Ref: KeyName}
      SecurityGroups:
      - {Ref: SecurityGroup}
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - '#!/bin/bash -ex

              '
            - 'yum -y update

              '
            - 'yum -y install aws-cfn-bootstrap

              '
            - '# Install the files and packages from the metadata

              '
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - {Ref: 'AWS::StackName'}
            - '         --resource LaunchConfig '
            - '         --configsets install_all '
            - '         --region '
            - {Ref: 'AWS::Region'}
            - '

              '
            - '# Signal the status from cfn-init

              '
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - {Ref: 'AWS::StackName'}
            - '         --resource AutoScalingGroup '
            - '         --region '
            - {Ref: 'AWS::Region'}
            - '

              '
    Type: AWS::AutoScaling::LaunchConfiguration
  SecurityGroup:
    Properties:
      GroupDescription: ECS Server Security Group
      SecurityGroupIngress:
      - CidrIp: {Ref: SourceCidr}
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      - CidrIp: {Ref: SourceCidr}
        FromPort: '8000'
        IpProtocol: tcp
        ToPort: '9000'
      - CidrIp: {Ref: SourceCidr}
        FromPort: '443'
        IpProtocol: tcp
        ToPort: '443'
      VpcId: {Ref: VPC}
    Type: AWS::EC2::SecurityGroup
  SysLogGroup:
    Properties: {RetentionInDays: 7}
    Type: AWS::Logs::LogGroup
